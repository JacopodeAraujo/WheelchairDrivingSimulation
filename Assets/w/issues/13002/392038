Index: InputSimulator.cs
===================================================================
--- InputSimulator.cs	(revision 321)
+++ InputSimulator.cs	(working copy)
@@ -108,6 +108,46 @@
         #region Methods
 
         /// <summary>
+        /// Determines if the <see cref="VirtualKeyCode"/> is an ExtendedKey
+        /// </summary>
+        /// <param name="keyCode">The key code.</param>
+        /// <returns>true if the key code is an extended key; otherwise, false.</returns>
+        /// <remarks>
+        /// The extended keys consist of the ALT and CTRL keys on the right-hand side of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; the NUM LOCK key; the BREAK (CTRL+PAUSE) key; the PRINT SCRN key; and the divide (/) and ENTER keys in the numeric keypad.
+        /// 
+        /// See http://msdn.microsoft.com/en-us/library/ms646267(v=vs.85).aspx Section "Extended-Key Flag"
+        /// </remarks>
+        public static bool IsExtendedKey(VirtualKeyCode keyCode)
+        {
+            if (keyCode == VirtualKeyCode.MENU ||
+                keyCode == VirtualKeyCode.LMENU ||
+                keyCode == VirtualKeyCode.RMENU ||
+                keyCode == VirtualKeyCode.CONTROL ||
+                keyCode == VirtualKeyCode.RCONTROL ||
+                keyCode == VirtualKeyCode.INSERT ||
+                keyCode == VirtualKeyCode.DELETE ||
+                keyCode == VirtualKeyCode.HOME ||
+                keyCode == VirtualKeyCode.END ||
+                keyCode == VirtualKeyCode.PRIOR ||
+                keyCode == VirtualKeyCode.NEXT ||
+                keyCode == VirtualKeyCode.RIGHT ||
+                keyCode == VirtualKeyCode.UP ||
+                keyCode == VirtualKeyCode.LEFT ||
+                keyCode == VirtualKeyCode.DOWN ||
+                keyCode == VirtualKeyCode.NUMLOCK ||
+                keyCode == VirtualKeyCode.CANCEL ||
+                keyCode == VirtualKeyCode.SNAPSHOT ||
+                keyCode == VirtualKeyCode.DIVIDE)
+            {
+                return true;
+            }
+            else
+            {
+                return false;
+            }
+        }
+
+        /// <summary>
         /// Determines whether a key is up or down at the time the function is called by calling the GetAsyncKeyState function. (See: http://msdn.microsoft.com/en-us/library/ms646293(VS.85).aspx)
         /// </summary>
         /// <param name="keyCode">The key code.</param>
@@ -209,6 +249,12 @@
             down.Data.Keyboard.Time = 0;
             down.Data.Keyboard.ExtraInfo = IntPtr.Zero;
 
+            // Check to see if this is an extended key.
+            if (InputSimulator.IsExtendedKey(keyCode))
+            {
+                down.Data.Keyboard.Flags = (UInt32)KeyboardFlag.EXTENDEDKEY;
+            }
+
             INPUT[] inputList = new INPUT[1];
             inputList[0] = down;
 
@@ -231,6 +277,12 @@
             up.Data.Keyboard.Time = 0;
             up.Data.Keyboard.ExtraInfo = IntPtr.Zero;
 
+            // Check to see if this is an extended key.
+            if (InputSimulator.IsExtendedKey(keyCode))
+            {
+                up.Data.Keyboard.Flags = up.Data.Keyboard.Flags | (UInt32)KeyboardFlag.EXTENDEDKEY;
+            }
+
             INPUT[] inputList = new INPUT[1];
             inputList[0] = up;
 
@@ -244,6 +296,9 @@
         /// <param name="keyCode">The VirtualKeyCode to press</param>
         public static void SimulateKeyPress(VirtualKeyCode keyCode)
         {
+            // Check to see if this is an extended key.
+            bool isExtendedKey = InputSimulator.IsExtendedKey(keyCode);
+
             var down = new INPUT();
             down.Type = (UInt32)InputType.KEYBOARD;
             down.Data.Keyboard = new KEYBDINPUT();
@@ -253,6 +308,12 @@
             down.Data.Keyboard.Time = 0;
             down.Data.Keyboard.ExtraInfo = IntPtr.Zero;
 
+            // If this is an extended key, send the correct flag.
+            if (isExtendedKey)
+            {
+                down.Data.Keyboard.Flags = (UInt32)KeyboardFlag.EXTENDEDKEY;
+            }
+
             var up = new INPUT();
             up.Type = (UInt32)InputType.KEYBOARD;
             up.Data.Keyboard = new KEYBDINPUT();
@@ -262,6 +323,12 @@
             up.Data.Keyboard.Time = 0;
             up.Data.Keyboard.ExtraInfo = IntPtr.Zero;
 
+            // If this is an extended key, send the correct flag.
+            if (isExtendedKey)
+            {
+                up.Data.Keyboard.Flags = up.Data.Keyboard.Flags | (UInt32)KeyboardFlag.EXTENDEDKEY;
+            }
+
             INPUT[] inputList = new INPUT[2];
             inputList[0] = down;
             inputList[1] = up;
