[
  {
    "Id": "526648",
    "ThreadId": "235928",
    "Html": "\r\n<p>Hi,</p>\r\n<p>First of all let me say thank you for writing this wrapper, we're using it as part of an automation project.</p>\r\n<p>We've run into issues when trying to Simulate pressing SHIFT &#43; END (in order to select all text) for example in any edit field in order to select all text we simulate hitting HOME then Holding SHIFT and pressing END:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>InputSimulator.SimulateKeyPress(VirtualKeyCode.HOME);\r\nInputSimulator.SimulateKeyDown(VirtualKeyCode.SHIFT);\r\nInputSimulator.SimulateKeyPress(VirtualKeyCode.END);\r\nInputSimulator.SimulateKeyUp(VirtualKeyCode.SHIFT);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The HOME and END Keys seem to be simulated, but the Holding of the SHIFT does not work. We've also tried using the 'SimulateModifiedKeyStroke' and does not work either (expected as its just a convenience method for the above logic):</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>InputSimulator.SimulateKeyPress(VirtualKeyCode.HOME);\r\nInputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.SHIFT, VirtualKeyCode.END);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Any Ideas?</p>\r\n<p>Thanks in advance!</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-24T14:36:10.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526661",
    "ThreadId": "235928",
    "Html": "Hi,\r\n<div><br>\r\n</div>\r\n<div>I did have a sample of this, but I used simulated a CTRL&#43;A... Would that work for you?</div>\r\n<div><br>\r\n</div>\r\n<div>I'm not sure why the shift isn't latching for you since I used the same concept for capital letters in another sample project once... Once idea might be to try the LSHIFT or RSHIFT. Sorry I can't repro it at the moment, I'm flat-out on another project.</div>\r\n<div><br>\r\n</div>\r\n<div>HTH,</div>\r\n<div>Mike<br>\r\n<br>\r\n<div>On Thu, Nov 25, 2010 at 8:36 AM, aolszowka <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: aolszowka</p>\r\n<div>\r\n<p>Hi,</p>\r\n<p>First of all let me say thank you for writing this wrapper, we're using it as part of an automation project.</p>\r\n<p>We've run into issues when trying to Simulate pressing SHIFT &#43; END (in order to select all text) for example in any edit field in order to select all text we simulate hitting HOME then Holding SHIFT and pressing END:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>InputSimulator.SimulateKeyPress(VirtualKeyCode.HOME);\r\nInputSimulator.SimulateKeyDown(VirtualKeyCode.SHIFT);\r\nInputSimulator.SimulateKeyPress(VirtualKeyCode.END);\r\nInputSimulator.SimulateKeyUp(VirtualKeyCode.SHIFT);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The HOME and END Keys seem to be simulated, but the Holding of the SHIFT does not work. We've also tried using the 'SimulateModifiedKeyStroke' and does not work either (expected as its just a convenience method for the above logic):</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>InputSimulator.SimulateKeyPress(VirtualKeyCode.HOME);\r\nInputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.SHIFT, VirtualKeyCode.END);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Any Ideas?</p>\r\n<p>Thanks in advance!</p>\r\n<p></p>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://inputsimulator.codeplex.com/Thread/View.aspx?ThreadId=235928&ANCHOR#Post526648\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:inputsimulator@discussions.codeplex.com@discussions.codeplex.com?subject=[inputsimulator:235928]\" target=\"_blank\">inputsimulator@discussions.codeplex.com@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:inputsimulator@discussions.codeplex.com@discussions.codeplex.com\" target=\"_blank\">\r\ninputsimulator@discussions.codeplex.com@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://inputsimulator.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2010-11-24T15:17:50.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "530172",
    "ThreadId": "235928",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>michaelnoonan wrote:</strong><br>\r\nHi,\r\n<div></div>\r\n<div>I did have a sample of this, but I used simulated a CTRL&#43;A... Would that work for you?</div>\r\n<div></div>\r\n<div>I'm not sure why the shift isn't latching for you since I used the same concept for capital letters in another sample project once... Once idea might be to try the LSHIFT or RSHIFT. Sorry I can't repro it at the moment, I'm flat-out on another project.</div>\r\n<div></div>\r\n<div>HTH,</div>\r\n<div>Mike</div>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>Hi Mike,</p>\r\n<p>CTRL&#43;A works great for us! I don't know why I didn't think of that before (a 'duh' moment for us).</p>\r\n<p>I actually had tried using the LSHIFT and RSHIFT as well before posting with the same results. I apologize for not mentioning that in my first post. We too are a little perplexed as to why the SHIFT doesn't latch on for certain keys. It works for Numerics\r\n and Alpha's but attempting to use these 'special' keys seem to fail. Looking at the code doesn't seem to show anything out of the ordinary that might be causing this, but my understanding of WinAPI is still pretty weak.</p>\r\n<p>Thank you once again for your project here, it has saved us countless hours of rolling our own. The work around works well enough for us!</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-02T09:27:28.107-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "601643",
    "ThreadId": "235928",
    "Html": "<p>I've had some time to dig into this issue more (we ran into situations where CTRL + A did not work), and I believe I have narrowed down the issue. Apparently we need to send the KEYEVENTF_EXTENDEDKEY in the dwFlags in order to make this work. It seems like there needs to be additional logic in InputSimulator to determine if the key is an Extended Key or not, however I am not sure when you would want to pass the Extended Key flag. At very least it seems like you'd want INSERT, DELETE, HOME, END, PAGE UP, PAGE DOWN, but I'm sure there are more. If anyone could find some MSDN documentation that'd be awesome. I'd be happy to make the necessary changes as a patch if we knew the exact cases where we needed KEYEVENTIF_EXTENDEDKEY.</p>\r\n<p>Here is a small test program that shows this working with Interop; to test open up notepad type in a garbage line, then run this program and set focus to notepad so that it receives the keys. The expected result is for the text to be selected at the end of execution:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Runtime.InteropServices;\r\n\r\n<span style=\"color: blue;\">namespace</span> SendInputFix\r\n{\r\n    <span style=\"color: blue;\">class</span> Program\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: green;\">//Make sure the Window is Focused Before this timeout is up</span>\r\n            System.Threading.Thread.Sleep(2000);\r\n\r\n            <span style=\"color: green;\">// Home Key Press Down</span>\r\n            INPUT homedown = <span style=\"color: blue;\">new</span> INPUT();\r\n            homedown.Type = INPUT_KEYBOARD;\r\n            homedown.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            homedown.Data.Keyboard.wVk = VK_HOME;\r\n            homedown.Data.Keyboard.wScan = 0;\r\n            homedown.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY;\r\n            homedown.Data.Keyboard.time = 0;\r\n            homedown.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// Home Key Press Up</span>\r\n            INPUT homeup = <span style=\"color: blue;\">new</span> INPUT();\r\n            homeup.Type = INPUT_KEYBOARD;\r\n            homeup.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            homeup.Data.Keyboard.wVk = VK_HOME;\r\n            homeup.Data.Keyboard.wScan = 0;\r\n            homeup.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP;\r\n            homeup.Data.Keyboard.time = 0;\r\n            homeup.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// Shift Key Press Down</span>\r\n            INPUT shiftdown = <span style=\"color: blue;\">new</span> INPUT();\r\n            shiftdown.Type = INPUT_KEYBOARD;\r\n            shiftdown.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            shiftdown.Data.Keyboard.wVk = VK_SHIFT;\r\n            shiftdown.Data.Keyboard.wScan = 0;\r\n            shiftdown.Data.Keyboard.time = 0;\r\n            shiftdown.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// End Key Press Down</span>\r\n            INPUT enddown = <span style=\"color: blue;\">new</span> INPUT();\r\n            enddown.Type = INPUT_KEYBOARD;\r\n            enddown.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            enddown.Data.Keyboard.wVk = VK_END;\r\n            enddown.Data.Keyboard.wScan = 0;\r\n            enddown.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY;\r\n            enddown.Data.Keyboard.time = 0;\r\n            enddown.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// End Key Press Up</span>\r\n            INPUT endup = <span style=\"color: blue;\">new</span> INPUT();\r\n            endup.Type = INPUT_KEYBOARD;\r\n            endup.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            endup.Data.Keyboard.wVk = VK_END;\r\n            endup.Data.Keyboard.wScan = 0;\r\n            endup.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP;\r\n            endup.Data.Keyboard.time = 0;\r\n            endup.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// Shift Key Press Up</span>\r\n            INPUT shiftup = <span style=\"color: blue;\">new</span> INPUT();\r\n            shiftup.Type = INPUT_KEYBOARD;\r\n            shiftup.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            shiftup.Data.Keyboard.wVk = VK_SHIFT;\r\n            shiftup.Data.Keyboard.wScan = 0;\r\n            shiftup.Data.Keyboard.dwFlags = KEYEVENTF_KEYUP;\r\n            shiftup.Data.Keyboard.time = 0;\r\n            shiftup.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// Declare the Input</span>\r\n            INPUT[] inputList = <span style=\"color: blue;\">new</span> INPUT[] { homedown, homeup, shiftdown, enddown, endup, shiftup };\r\n\r\n            <span style=\"color: green;\">// Ensure that all inputs were entered</span>\r\n            <span style=\"color: blue;\">uint</span> sentkeys = SendInput(6, inputList, Marshal.SizeOf(<span style=\"color: blue;\">typeof</span>(INPUT)));\r\n            <span style=\"color: blue;\">if</span> (sentkeys != 6)\r\n            {\r\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> ArgumentException(<span style=\"color: #a31515;\">\"FAIL\"</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">#region</span> Win32API\r\n\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> INPUT_MOUSE = 0;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> INPUT_KEYBOARD = 1;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> INPUT_HARDWARE = 3;\r\n\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">byte</span> VK_HOME = 0X24;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">byte</span> VK_SHIFT = 0XA1;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">byte</span> VK_END = 0x23;\r\n\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">uint</span> KEYEVENTF_EXTENDEDKEY = 0x0001;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">uint</span> KEYEVENTF_KEYUP = 0x0002;\r\n\r\n        [DllImport(<span style=\"color: #a31515;\">\"user32.dll\"</span>, SetLastError = <span style=\"color: blue;\">true</span>)]\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">extern</span> <span style=\"color: blue;\">uint</span> SendInput(<span style=\"color: blue;\">uint</span> numberOfInputs, INPUT[] inputs, <span style=\"color: blue;\">int</span> sizeOfInputStructure);\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> INPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Type;\r\n            <span style=\"color: blue;\">public</span> MOUSEKEYBDHARDWAREINPUT Data;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Explicit)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> MOUSEKEYBDHARDWAREINPUT\r\n        {\r\n            <span style=\"color: green;\">// Fields</span>\r\n            [FieldOffset(0)]\r\n            <span style=\"color: blue;\">public</span> HARDWAREINPUT Hardware;\r\n            [FieldOffset(0)]\r\n            <span style=\"color: blue;\">public</span> KEYBDINPUT Keyboard;\r\n            [FieldOffset(0)]\r\n            <span style=\"color: blue;\">public</span> MOUSEINPUT Mouse;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> KEYBDINPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> wVk;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> wScan;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> dwFlags;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> time;\r\n            <span style=\"color: blue;\">public</span> IntPtr dwExtraInfo;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> MOUSEINPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> X;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> Y;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> MouseData;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Flags;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Time;\r\n            <span style=\"color: blue;\">public</span> IntPtr ExtraInfo;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> HARDWAREINPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Msg;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> ParamL;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> ParamH;\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-22T10:53:16.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "851624",
    "ThreadId": "235928",
    "Html": "<p>Wow has it really been over a year? I finally got back around to this issue and have submitted a fix:</p>\r\n<p>I have located some documentation on MSDN that outlines which keys are considered 'Extended Keys' here http://msdn.microsoft.com</p>\r\n<p class=\"comment_divider\">/en-us/library/ms646267(v=vs.85).aspx Section \"Extended-Key Flag\". From the linked documentation:<br />\"The  extended-key flag indicates whether the keystroke message originated  from one of the additional keys on the enhanced keyboard. The extended  keys consist of the ALT and CTRL keys on the right-hand side of the  keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in  the clusters to the left of the numeric keypad; the NUM LOCK key; the  BREAK (CTRL+PAUSE) key; the PRINT SCRN key; and the divide (/) and ENTER  keys in the numeric keypad. The extended-key flag is set if the key is  an extended key.\"</p>\r\n<p class=\"comment_divider\">I have modified the version 0.1.0.0 of the Input Simulation Library  (which is the version we use, and the version that is still available on  the download page).</p>\r\n<p class=\"comment_divider\">I created a work item here http://inputsimulator.codeplex.com/workitem/13002 and submitted a .patch. If you have any questions please feel free to contact me via CodePlex.</p>",
    "PostedDate": "2012-06-20T09:36:18.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "916197",
    "ThreadId": "235928",
    "Html": "<p>Thank you,&nbsp;aolszowka, for the the patch.<br />I'm using your IsExtendedKey() function with the&nbsp;the newer repository source for InputSimulator.</p>",
    "PostedDate": "2012-09-22T18:33:11.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1004996",
    "ThreadId": "235928",
    "Html": "Hey All,\r<br />\n<br />\nThanks for helping out make the project better. I've (finally) got a bit of white space to get the project rolling a little. Plans are to push to github to make forking/pull-requests easier, put together a testing strategy, and release v1 + nuget.\r<br />\n<br />\nAny other ideas?\r<br />\n<br />\nCheers,\r<br />\nMike<br />\n",
    "PostedDate": "2013-02-21T19:17:32.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1005246",
    "ThreadId": "235928",
    "Html": "Hey Mike,\r<br />\n<br />\nIf you plan on moving the Project to GitHub can you please make sure to normalize the line endings throughout the Project and not rely on Git to try and be helpful about autofixing them? There was another Open Source Project which I contribute which moved to GitHub that did not normalize line endings and has made it extremely frustrating to attempt to submit patches as the Git Client attempts to be continually helpful despite every attempt to disable the functionality.\r<br />\n<br />\nThanks,\r<br />\nAce<br />\n",
    "PostedDate": "2013-02-22T06:48:55.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]