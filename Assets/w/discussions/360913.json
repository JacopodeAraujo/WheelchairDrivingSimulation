[
  {
    "Id": "853564",
    "ThreadId": "360913",
    "Html": "\r\n<p>Hi,&nbsp;</p>\r\n<p>I need to make a multilingual virtual keyboard. It should have support for accented characters like &acirc;, &fnof; etc.</p>\r\n<p>Normally we make such characters by pressing alt key, typing a sequence on numpad (e.g. 131) and releasing alt key. It works with manual input, but i am not able to simulate such action from input simulator.</p>\r\n<p>I have tried SimulateModifiedKeystoke, extended key board patch given by you, tried adding some delay, tried code in&nbsp;<a href=\"http://inputsimulator.codeplex.com/discussions/235928\">http://inputsimulator.codeplex.com/discussions/235928</a>&nbsp;. But\r\n nothing seems to be fixing this.</p>\r\n<p>Any help would be sincerely appreciated as I am in a big fix.&nbsp;</p>\r\n<p>Modifed Code :</p>\r\n<pre><span>List</span>&lt;<span>VirtualKeyCode</span>&gt;&nbsp;myList&nbsp;=&nbsp;<span>new</span>&nbsp;<span>List</span>&lt;<span>VirtualKeyCode</span>&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.Add(<span>VirtualKeyCode</span>.NUMPAD1);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.Add(<span>VirtualKeyCode</span>.NUMPAD3);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.Add(<span>VirtualKeyCode</span>.NUMPAD1);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>InputSimulator</span>.SimulateModifiedKeyStroke(<span>VirtualKeyCode</span>.MENU,&nbsp;myList);</pre>\r\n<p>&nbsp;</p>\r\n<pre><span>public</span>&nbsp;<span>static</span>&nbsp;<span>void</span>&nbsp;SimulateKeyPress(<span>VirtualKeyCode</span>&nbsp;keyCode)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>bool</span>&nbsp;isExtendedKey&nbsp;=&nbsp;<span>InputSimulator</span>.IsExtendedKey(keyCode);\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>uint</span>&nbsp;KEYEVENTF_EXTENDEDKEY&nbsp;=&nbsp;0x0001;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>uint</span>&nbsp;KEYEVENTF_KEYUP&nbsp;=&nbsp;0x0002;\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;down&nbsp;=&nbsp;<span>new</span>&nbsp;<span>INPUT</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Type&nbsp;=&nbsp;(<span>UInt32</span>)<span>InputType</span>.KEYBOARD;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard&nbsp;=&nbsp;<span>new</span>&nbsp;<span>KEYBDINPUT</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.Vk&nbsp;=&nbsp;(<span>UInt16</span>)keyCode;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.Scan&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.Flags&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.Time&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.dwFlags&nbsp;=&nbsp;KEYEVENTF_EXTENDEDKEY;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.ExtraInfo&nbsp;=&nbsp;<span>IntPtr</span>.Zero;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;If&nbsp;this&nbsp;is&nbsp;an&nbsp;extended&nbsp;key,&nbsp;send&nbsp;the&nbsp;correct&nbsp;flag.</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;(isExtendedKey)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;down.Data.Keyboard.Flags&nbsp;=&nbsp;(<span>UInt32</span>)<span>KeyboardFlag</span>.EXTENDEDKEY;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;up&nbsp;=&nbsp;<span>new</span>&nbsp;<span>INPUT</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Type&nbsp;=&nbsp;(<span>UInt32</span>)<span>InputType</span>.KEYBOARD;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard&nbsp;=&nbsp;<span>new</span>&nbsp;<span>KEYBDINPUT</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.Vk&nbsp;=&nbsp;(<span>UInt16</span>)keyCode;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.Scan&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.Flags&nbsp;=&nbsp;(<span>UInt32</span>)<span>KeyboardFlag</span>.KEYUP;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.Time&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.dwFlags&nbsp;=&nbsp;KEYEVENTF_EXTENDEDKEY&nbsp;|&nbsp;KEYEVENTF_KEYUP;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.ExtraInfo&nbsp;=&nbsp;<span>IntPtr</span>.Zero;\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;If&nbsp;this&nbsp;is&nbsp;an&nbsp;extended&nbsp;key,&nbsp;send&nbsp;the&nbsp;correct&nbsp;flag.</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;(isExtendedKey)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up.Data.Keyboard.Flags&nbsp;=&nbsp;up.Data.Keyboard.Flags&nbsp;|&nbsp;(<span>UInt32</span>)<span>KeyboardFlag</span>.EXTENDEDKEY;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>INPUT</span>[]&nbsp;inputList&nbsp;=&nbsp;<span>new</span>&nbsp;<span>INPUT</span>[2];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputList[0]&nbsp;=&nbsp;down;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputList[1]&nbsp;=&nbsp;up;\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;numberOfSuccessfulSimulatedInputs&nbsp;=&nbsp;SendInput(2,&nbsp;inputList,&nbsp;<span>Marshal</span>.SizeOf(<span>typeof</span>(<span>INPUT</span>)));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;(numberOfSuccessfulSimulatedInputs&nbsp;==&nbsp;0)&nbsp;<span>throw</span>&nbsp;<span>new</span>&nbsp;<span>Exception</span>(<span>string</span>.Format(<span>&quot;The&nbsp;key&nbsp;press&nbsp;simulation&nbsp;for&nbsp;{0}&nbsp;was&nbsp;not&nbsp;successful.&quot;</span>,&nbsp;keyCode));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-06-25T22:07:48.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "854071",
    "ThreadId": "360913",
    "Html": "Hi There,\r\n<div><br>\r\n</div>\r\n<div>Take a look at this discussion where somebody was trying to do the same thing. Hopefully that helps.</div>\r\n<div><br>\r\n</div>\r\n<div><a href=\"http://inputsimulator.codeplex.com/discussions/230578\">http://inputsimulator.codeplex.com/discussions/230578</a>\r\n</div>\r\n<div><br>\r\n</div>\r\n<div>Mike<br>\r\n<br>\r\n<div>On Tue, Jun 26, 2012 at 3:07 PM, amitkumarbhati <span dir=\"ltr\">&lt;<a href=\"mailto:notifications@codeplex.com\" target=\"_blank\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: amitkumarbhati</p>\r\n<div>\r\n<p>Hi, </p>\r\n<p>I need to make a multilingual virtual keyboard. It should have support for accented characters like â, ƒ etc.</p>\r\n<p>Normally we make such characters by pressing alt key, typing a sequence on numpad (e.g. 131) and releasing alt key. It works with manual input, but i am not able to simulate such action from input simulator.</p>\r\n<p>I have tried SimulateModifiedKeystoke, extended key board patch given by you, tried adding some delay, tried code in\r\n<a href=\"http://inputsimulator.codeplex.com/discussions/235928\" target=\"_blank\">http://inputsimulator.codeplex.com/discussions/235928</a> . But nothing seems to be fixing this.</p>\r\n<p>Any help would be sincerely appreciated as I am in a big fix. </p>\r\n<p>Modifed Code :</p>\r\n<pre><span>List</span>&lt;<span>VirtualKeyCode</span>&gt; myList = <span>new</span> <span>List</span>&lt;<span>VirtualKeyCode</span>&gt;();\n            myList.Add(<span>VirtualKeyCode</span>.NUMPAD1);\n            myList.Add(<span>VirtualKeyCode</span>.NUMPAD3);\n            myList.Add(<span>VirtualKeyCode</span>.NUMPAD1);\n            <span>InputSimulator</span>.SimulateModifiedKeyStroke(<span>VirtualKeyCode</span>.MENU, myList);</pre>\r\n<p></p>\r\n<pre><span>public</span> <span>static</span> <span>void</span> SimulateKeyPress(<span>VirtualKeyCode</span> keyCode)\n        {\n            <span>bool</span> isExtendedKey = <span>InputSimulator</span>.IsExtendedKey(keyCode);\n \n            <span>uint</span> KEYEVENTF_EXTENDEDKEY = 0x0001;\n            <span>uint</span> KEYEVENTF_KEYUP = 0x0002;\n \n            <span>var</span> down = <span>new</span> <span>INPUT</span>();\n            down.Type = (<span>UInt32</span>)<span>InputType</span>.KEYBOARD;\n            down.Data.Keyboard = <span>new</span> <span>KEYBDINPUT</span>();\n            down.Data.Keyboard.Vk = (<span>UInt16</span>)keyCode;\n            down.Data.Keyboard.Scan = 0;\n            down.Data.Keyboard.Flags = 0;\n            down.Data.Keyboard.Time = 0;\n            down.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY;\n            down.Data.Keyboard.ExtraInfo = <span>IntPtr</span>.Zero;\n            \n            <span>// If this is an extended key, send the correct flag.</span>\n            <span>if</span> (isExtendedKey)\n            {\n                down.Data.Keyboard.Flags = (<span>UInt32</span>)<span>KeyboardFlag</span>.EXTENDEDKEY;\n            }\n \n            <span>var</span> up = <span>new</span> <span>INPUT</span>();\n            up.Type = (<span>UInt32</span>)<span>InputType</span>.KEYBOARD;\n            up.Data.Keyboard = <span>new</span> <span>KEYBDINPUT</span>();\n            up.Data.Keyboard.Vk = (<span>UInt16</span>)keyCode;\n            up.Data.Keyboard.Scan = 0;\n            up.Data.Keyboard.Flags = (<span>UInt32</span>)<span>KeyboardFlag</span>.KEYUP;\n            up.Data.Keyboard.Time = 0;\n            up.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP; \n            up.Data.Keyboard.ExtraInfo = <span>IntPtr</span>.Zero;\n \n            \n            <span>// If this is an extended key, send the correct flag.</span>\n            <span>if</span> (isExtendedKey)\n            {\n                up.Data.Keyboard.Flags = up.Data.Keyboard.Flags | (<span>UInt32</span>)<span>KeyboardFlag</span>.EXTENDEDKEY;\n            }\n \n            <span>INPUT</span>[] inputList = <span>new</span> <span>INPUT</span>[2];\n            inputList[0] = down;\n            inputList[1] = up;\n \n            <span>var</span> numberOfSuccessfulSimulatedInputs = SendInput(2, inputList, <span>Marshal</span>.SizeOf(<span>typeof</span>(<span>INPUT</span>)));\n            <span>if</span> (numberOfSuccessfulSimulatedInputs == 0) <span>throw</span> <span>new</span> <span>Exception</span>(<span>string</span>.Format(<span>&quot;The key press simulation for {0} was not successful.&quot;</span>, keyCode));\n        }</pre>\r\n<p></p>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://inputsimulator.codeplex.com/discussions/360913#post853564\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:inputsimulator@discussions.codeplex.com?subject=[inputsimulator:360913]\" target=\"_blank\">inputsimulator@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:inputsimulator@discussions.codeplex.com\" target=\"_blank\">\r\ninputsimulator@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://inputsimulator.codeplex.com/subscriptions/thread/project/edit\" target=\"_blank\">\r\nunsubscribe or change your settings</a> on codePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at\r\n<a href=\"http://codeplex.com\" target=\"_blank\">codeplex.com</a></p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n<br>\r\n</div>\r\n",
    "PostedDate": "2012-06-26T15:05:21.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]