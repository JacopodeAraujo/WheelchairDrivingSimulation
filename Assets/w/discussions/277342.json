[
  {
    "Id": "689933",
    "ThreadId": "277342",
    "Html": "\r\n<p>hi (again),</p>\r\n<p>anyway to determine the numpad ENTER?</p>\r\n<p>thankyou in advance,</p>\r\n<p>Shabi</p>\r\n",
    "PostedDate": "2011-10-26T15:28:11.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "851589",
    "ThreadId": "277342",
    "Html": "<p>Sorry for the late reply, I have finally gotten back around to this project.</p>\r\n<p>Unfortunately in this library there is no differentiation between the two, in our AutomationFramework we needed to tell the difference so we had to use straight Interop with SendInput (as opposed to using this library). If someone is feeling adventurous enough please feel free to integrate the changes into the main code line, I am not sure what the VirtualKey should be defined as (I'd vote for TEN_KEY_ENTER)</p>\r\n<p>The \"secret sauce\" is that the Numeric Enter must have the KEYEVENTF_EXTENDEDKEY flag sent in its dwFlags. This is the root cause of another issue that I posted here http://inputsimulator.codeplex.com/discussions/235928. There is a list of keys that must have the KEYEVENTF_EXTENDEDKEY appended to them I am working on cleaning up/documenting our changes to submit them back to the project as we speak.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// -----------------------------------------------------------------------</span>\r\n<span style=\"color: green;\">// &lt;copyright file=\"Program.cs\"&gt;</span>\r\n<span style=\"color: green;\">//  This code is released into the public domain.</span>\r\n<span style=\"color: green;\">// &lt;/copyright&gt;</span>\r\n<span style=\"color: green;\">// -----------------------------------------------------------------------</span>\r\n\r\n<span style=\"color: blue;\">namespace</span> InputSimulatorTest\r\n{\r\n    <span style=\"color: blue;\">using</span> System;\r\n    <span style=\"color: blue;\">using</span> System.Runtime.InteropServices;\r\n\r\n    <span style=\"color: blue;\">class</span> Program\r\n    {\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Simulate sending a 10-key 'Enter'</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: green;\">//Make sure the Window is Focused Before this timeout is up</span>\r\n            System.Threading.Thread.Sleep(2000);\r\n\r\n            <span style=\"color: green;\">// Hold the 10-key 'Enter'</span>\r\n            INPUT down = <span style=\"color: blue;\">new</span> INPUT();\r\n            down.Type = INPUT_KEYBOARD;\r\n            down.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            down.Data.Keyboard.wVk = VK_RETURN;\r\n            down.Data.Keyboard.wScan = SC_RETURN;\r\n            down.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY;\r\n            down.Data.Keyboard.time = 0;\r\n            down.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// Release the 10-key 'Enter'</span>\r\n            INPUT up = <span style=\"color: blue;\">new</span> INPUT();\r\n            up.Type = INPUT_KEYBOARD;\r\n            up.Data.Keyboard = <span style=\"color: blue;\">new</span> KEYBDINPUT();\r\n            up.Data.Keyboard.wVk = VK_RETURN;\r\n            up.Data.Keyboard.wScan = SC_RETURN;\r\n            up.Data.Keyboard.dwFlags = KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP;\r\n            up.Data.Keyboard.time = 0;\r\n            up.Data.Keyboard.dwExtraInfo = IntPtr.Zero;\r\n\r\n            <span style=\"color: green;\">// Declare the Input</span>\r\n            INPUT[] inputList = <span style=\"color: blue;\">new</span> INPUT[] { down, up };\r\n\r\n            <span style=\"color: green;\">// Ensure that all inputs were entered</span>\r\n            <span style=\"color: blue;\">uint</span> sentkeys = SendInput(2, inputList, Marshal.SizeOf(<span style=\"color: blue;\">typeof</span>(INPUT)));\r\n            <span style=\"color: blue;\">if</span> (sentkeys != 2)\r\n            {\r\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> ArgumentException(<span style=\"color: #a31515;\">\"FAIL\"</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">#region</span> Win32API\r\n\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> INPUT_MOUSE = 0;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> INPUT_KEYBOARD = 1;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> INPUT_HARDWARE = 3;\r\n\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">byte</span> VK_RETURN = 0x0D;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">byte</span> SC_RETURN = 0x1C;\r\n\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">uint</span> KEYEVENTF_EXTENDEDKEY = 0x0001;\r\n        <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">uint</span> KEYEVENTF_KEYUP = 0x0002;\r\n\r\n        [DllImport(<span style=\"color: #a31515;\">\"user32.dll\"</span>, SetLastError = <span style=\"color: blue;\">true</span>)]\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">extern</span> <span style=\"color: blue;\">uint</span> SendInput(<span style=\"color: blue;\">uint</span> numberOfInputs, INPUT[] inputs, <span style=\"color: blue;\">int</span> sizeOfInputStructure);\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> INPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Type;\r\n            <span style=\"color: blue;\">public</span> MOUSEKEYBDHARDWAREINPUT Data;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Explicit)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> MOUSEKEYBDHARDWAREINPUT\r\n        {\r\n            <span style=\"color: green;\">// Fields</span>\r\n            [FieldOffset(0)]\r\n            <span style=\"color: blue;\">public</span> HARDWAREINPUT Hardware;\r\n            [FieldOffset(0)]\r\n            <span style=\"color: blue;\">public</span> KEYBDINPUT Keyboard;\r\n            [FieldOffset(0)]\r\n            <span style=\"color: blue;\">public</span> MOUSEINPUT Mouse;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> KEYBDINPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> wVk;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> wScan;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> dwFlags;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> time;\r\n            <span style=\"color: blue;\">public</span> IntPtr dwExtraInfo;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> MOUSEINPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> X;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> Y;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> MouseData;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Flags;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Time;\r\n            <span style=\"color: blue;\">public</span> IntPtr ExtraInfo;\r\n        }\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">struct</span> HARDWAREINPUT\r\n        {\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">uint</span> Msg;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> ParamL;\r\n            <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> ParamH;\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2012-06-20T08:42:47.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "860236",
    "ThreadId": "277342",
    "Html": "<p>:)</p>\r\n<p>I found the same problem. Actually, not specifying extended resulted in extended being active (at least with ï»¿keybd_event which does not have that parameter), so if you send input to an application that distinguishes NumPad keys, enter, +, -, ... will be treated as NumPad keys.</p>\r\n<p>Mind you, so far I used SendMessage, now I will use SendInput (for SendMessage you need a destination Handle which is not always easy to determine). So I have high hopes of SendInput. And this project. :)</p>",
    "PostedDate": "2012-07-11T03:44:01.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]